funcs:
- name: HandleError
  type: resolver
  body: |-
    function (returnArgCount, errorPosition, callExpr) {
      var handler = "\t"
      for (pos = 0; pos < returnArgCount; pos++) {
        handler += (pos == errorPosition ? "err": "_")
        handler += (pos == returnArgCount - 1 ? " := " : " , ")
      }

      handler += callExpr
      handler += "\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}"
      return handler
    }
tenets:
- import: codelingo/jenkinsx/orginterfaces
- import: codelingo/jenkinsx/intformat
- import: codelingo/kubernetes/jsonapi-kind-compulsory-metadata
- import: codelingo/cockroachdb/fmt-verbs
- import: codelingo/cacophony/defer-in-loop
- import: codelingo/effective-go/comment-first-word-as-subject
- import: codelingo/go/ticker-in-for-switch
- import: codelingo/kubernetes/well-formed-lists
- import: codelingo/php/if-assignment
- import: codelingo/kubernetes/flags-have-underscores
- import: codelingo/cockroachdb/func-args-inline-comments
- name: do-not-ignore-errors
  query: |
    import codelingo/ast/go

    go.block_stmt(depth = any): # The call expression is a child of block_stmt without any intervening facts, such as go.assign_stmt.
      go.list:
        go.expr_stmt:
          @review comment
          @rewrite --replace "{{ HandleError(returnArgCount, errorPosition, callExpr) }}"
          go.call_expr:
            raw as callExpr
            edge("calls"):
              go.func_decl:
                go.func_type:
                  go.field_list
                  go.field_list:
                    child_count as returnArgCount
                    go.field:
                      sibling_order as errorPosition
                      go.ident:
                        name == "error"
